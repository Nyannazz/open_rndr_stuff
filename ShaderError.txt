#version 330 core

#define d_vertex_buffer 0
#define d_image 1
#define d_circle 2
#define d_rectangle 3
#define d_font_image_map 4
#define d_expansion 5
#define d_fast_line 6
#define d_mesh_line 7
#define d_primitive d_rectangle


uniform vec2 p_resolution;
uniform vec2 p_colVec;
uniform vec2 p_ballPos;
uniform float p_size;
uniform vec2 p_ballPosTwo;
uniform float p_sizeTwo;
uniform vec2 p_ballPosThree;
uniform float p_sizeThree;

layout(origin_upper_left) in vec4 gl_FragCoord;


layout(shared) uniform ContextBlock {
    uniform mat4 u_modelNormalMatrix;
    uniform mat4 u_modelMatrix;
    uniform mat4 u_viewNormalMatrix;
    uniform mat4 u_viewMatrix;
    uniform mat4 u_projectionMatrix;
    uniform float u_contentScale;
    uniform vec2 u_viewDimensions;
};

layout(shared) uniform StyleBlock {
    uniform vec4 u_fill;
    uniform vec4 u_stroke;
    uniform float u_strokeWeight;
    uniform float[25] u_colorMatrix;
};

in vec3 va_position;
in vec3 va_normal;
in vec2 va_texCoord0;
in vec2 vi_dimensions;
in vec3 vi_offset;



in vec3 v_worldNormal;
in vec3 v_viewNormal;
in vec3 v_worldPosition;
in vec3 v_viewPosition;
in vec4 v_clipPosition;
flat in mat4 v_modelNormalMatrix;



flat in int v_instance;
in vec3 v_boundsSize;
out vec4 o_color;
void main(void) {
        int c_instance = v_instance;
    int c_element = 0;
    vec2 c_screenPosition = gl_FragCoord.xy / u_contentScale;
    float c_contourPosition = 0;
    vec3 c_boundsPosition = vec3(va_texCoord0, 0.0);
    vec3 c_boundsSize = v_boundsSize;
    vec4 x_fill = u_fill;
    vec4 x_stroke = u_stroke;
    {
        vec2 normScreenPos=c_screenPosition/p_resolution;


vec2 normBallPos=p_ballPos/p_resolution;
float ballDistance=distance(normBallPos, normScreenPos);
float multiplyDistance=ballDistance*100.0;
float sumColor=p_size/multiplyDistance;

normBallPos=p_ballPosTwo/p_resolution;
ballDistance=distance(normBallPos, normScreenPos);
multiplyDistance=ballDistance*80.0;
                sumColor+=p_sizeTwo/multiplyDistance;

                normBallPos=p_ballPosThree/p_resolution;
ballDistance=distance(normBallPos, normScreenPos);
multiplyDistance=ballDistance*80.0;
                sumColor+=p_sizeThree/multiplyDistance;

float modColor=mod(sumColor, 1.0);

//x_fill.rgba=vec4(vec3((1.0/multiplyDistance)*vec3(p_colVec,1.0)),1.0);
//x_fill.rgba=vec4(vec3((modColor)*vec3(p_colVec,1.0)),1.0);

x_fill.rgba=vec4(vec3(modColor,1.0),1.0);
    }
    vec2 wd = fwidth(va_texCoord0 - vec2(0.5));
    vec2 d = abs((va_texCoord0 - vec2(0.5)) * 2);

    float irx = smoothstep(0.0, wd.x * 2.5, 1.0-d.x - u_strokeWeight*2.0/vi_dimensions.x);
    float iry = smoothstep(0.0, wd.y * 2.5, 1.0-d.y - u_strokeWeight*2.0/vi_dimensions.y);
    float ir = irx*iry;

    vec4 final = vec4(1.0);
    final.rgb = x_fill.rgb * x_fill.a;
    final.a = x_fill.a;

    float sa = (1.0-ir) * x_stroke.a;
    final.rgb = final.rgb * (1.0-sa) + x_stroke.rgb * sa;
    final.a = final.a * (1.0-sa) + sa;

       o_color = final;
}
